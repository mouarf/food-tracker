{"version":3,"sources":["serviceWorkerRegistration.ts","model/Satiety.ts","features/counter/counterSlice.ts","model/Meal.ts","repositories/MealRepository/MealDatabaseAdapter.ts","repositories/MealRepository/MealRepository.ts","repositories/ConnectionFactory.ts","repositories/MealRepository/MealDatabaseSchema.ts","repositories/MealRepository/index.ts","features/mealForm/mealSlice.ts","features/navMenu/navMenuSlice.ts","features/home/homeSlice.ts","app/store.ts","features/navMenu/NavMenu.tsx","Layout.tsx","features/home/components/MealRow/components/MealDateTime/index.ts","features/home/components/MealRow/components/MealDateTime/MealDateTime.tsx","features/home/components/MealRow/components/MealWeight/MealWeight.tsx","features/home/components/MealRow/components/HungerNote/index.ts","features/home/components/MealRow/components/HungerNote/HungerNote.tsx","features/home/components/MealRow/components/SatietyLabel/Satiety.tsx","features/home/components/MealRow/MealRow.tsx","features/home/components/DeleteButton/DeleteMealsButton.tsx","features/home/components/DeleteButton/index.ts","features/mealForm/components/MealDateField/MealDateField.tsx","features/mealForm/components/MealDateField/index.ts","features/mealForm/components/MealTimeField/MealTimeField.tsx","features/mealForm/components/MealTimeField/index.ts","features/mealForm/components/HungerNoteSlider/HungerNoteSlider.tsx","features/mealForm/components/HungerNoteSlider/index.ts","features/mealForm/components/SatietySelect/SatietySelect.tsx","features/mealForm/components/SatietySelect/index.ts","features/mealForm/components/MealWeightComponent/MealWeightField/MealWeightValidator.ts","features/mealForm/components/MealWeightComponent/MealWeightField/MealWeightField.tsx","features/mealForm/components/MealWeightComponent/MealWeightField/index.ts","features/mealForm/components/MealWeightComponent/MealWeightComponent.tsx","features/mealForm/components/MealWeightComponent/index.ts","features/mealForm/components/SaveMealButton/SaveMealButton.tsx","features/mealForm/components/SaveMealButton/index.ts","features/mealForm/components/TotalWeight/TotalWeight.tsx","features/mealForm/components/TotalWeight/index.ts","features/mealForm/MealForm.tsx","index.tsx","features/home/Home.tsx"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","Satiety","counterSlice","createSlice","name","initialState","value","reducers","increment","decrement","incrementByAmount","action","payload","actions","Meal","id","date","weightValues","hungerNote","satiety","_id","_date","_weight","_hungerNote","_satiety","this","Date","filterNullValues","JSON","stringify","reduce","w1","w2","filteredWeightValues","filter","length","weight","serializedMeal","deserialized","parse","MealDatabaseAdapter","meal","_meal","toISOString","join","FromValues","split","map","Number","MealRepository","connection","_connection","nbOfMeals","select","from","MealDatabaseName","order","by","type","limit","mealDbObject","dbObject","adapter","undefined","insert","update","numberOfLineAffected","mealIds","remove","where","in","numberOfDeletedLines","into","values","set","_instance","Connection","Worker","initDb","tables","columns","primaryKey","autoIncrement","notNull","dataType","now","fine","mealSlice","updateMealDate","dateInState","newDate","setHours","getHours","setMinutes","getMinutes","updateMealTime","setFullYear","getFullYear","setMonth","getMonth","setDate","getDate","updateMealWeight","index","newValue","addMealWeight","push","removeMealWeight","pop","updateSatiety","updateHungerNote","clearState","addMealFormSelector","mealForm","mealFormReducer","reducer","navMenuSlice","drawerIsOpen","openDrawer","closeDrawer","navMenuSelector","navMenu","navMenuReducer","homeSlice","lastMeals","selectedMealIds","addSelectedMealId","removeSelectedMealId","lastMealsLoaded","homeSelector","home","homeReducer","store","configureStore","counter","counterReducer","useStyles","makeStyles","theme","createStyles","drawer","width","drawerPaper","List","ListItem","component","NavLink","to","ListItemIcon","ListItemText","primary","NavMenu","navMenuState","useSelector","dispatch","useDispatch","classes","Hidden","smUp","Drawer","variant","anchor","open","onClick","className","paper","Toolbar","Typography","xsDown","root","display","appBar","zIndex","content","padding","spacing","Layout","props","AppBar","IconButton","edge","color","aria-label","children","Container","MealDateTime","formatNumber","toString","padStart","formattedDate","formattedTime","MealWeight","HungerNote","note","SatietyLabel","labels","ateToMuch","stillHungry","MealRow","isSelected","TableRow","selected","TableCell","align","useStyle","buttonContainer","justifyContent","button","marginTop","DeleteMealsButton","Button","disabled","a","getInstance","repository","deleteMeals","deleteMealsAsync","datePicker","marginBottom","MealDateField","utils","DateFnsUtils","onChange","format","label","invalidDateMessage","MealTimeField","time","ampm","slider","HungerNoteSlider","marks","Array","keys","key","Slider","min","max","step","onChangeCommitted","event","element","SatietySelect","FormControl","InputLabel","Select","labelId","feeling","target","MenuItem","MealWeightValidator","isNaN","inputField","MealWeightField","useState","setError","errorMessage","setErrorMessage","TextField","helperText","validate","isValid","InputProps","endAdornment","InputAdornment","position","autoFocus","buttonSection","MealWeightComponent","Fragment","SaveMealButton","getState","mealState","mealToSave","mealRepository","saveMeal","totalWeight","TotalWeight","container","ReactDOM","render","path","exact","numberOfMealToLoad","getLastMeals","homeState","TableContainer","Table","TableHead","TableBody","includes","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.678ead33.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","export enum Satiety {\n    stillHungry,\n    fine,\n    ateToMuch\n}","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { AppThunk, RootState } from '../../app/store';\n\ninterface CounterState {\n  value: number;\n}\n\nconst initialState: CounterState = {\n  value: 0,\n};\n\nexport const counterSlice = createSlice({\n  name: 'counter',\n  initialState,\n  reducers: {\n    increment: state => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1;\n    },\n    decrement: state => {\n      state.value -= 1;\n    },\n    // Use the PayloadAction type to declare the contents of `action.payload`\n    incrementByAmount: (state, action: PayloadAction<number>) => {\n      state.value += action.payload;\n    },\n  },\n});\n\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched\nexport const incrementAsync = (amount: number): AppThunk => dispatch => {\n  setTimeout(() => {\n    dispatch(incrementByAmount(amount));\n  }, 1000);\n};\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\nexport const selectCount = (state: RootState) => state.counter.value;\n\nexport default counterSlice.reducer;\n","import {Satiety} from \"./Satiety\";\n\nexport default class Meal {\n    private readonly _id: number | undefined;\n    private readonly _date: Date;\n    private readonly _weight: number[];\n    private readonly _hungerNote: number;\n    private readonly _satiety: Satiety;\n    \n    private constructor(id: number | undefined, date: Date, weightValues: number[], hungerNote: number, satiety: Satiety) {\n        this._id = id;\n        this._hungerNote = hungerNote;\n        this._satiety = satiety;\n        this._date = new Date(date);\n        this._weight = Meal.filterNullValues(weightValues)\n    }\n    \n    private static filterNullValues(weightValues: number[]): number[] {\n        const filteredWeightValues = weightValues.filter(value => value > 0);\n        return filteredWeightValues.length > 0\n            ? filteredWeightValues\n            : [0];\n    }\n    \n    public get id(): number | undefined {\n        return this._id;\n    }\n\n    public get date(): Date {\n        return this._date;\n    }\n\n    public get weight(): number[] {\n        return this._weight;\n    }\n\n    public get hungerNote(): number {\n        return this._hungerNote;\n    }\n\n    public get satiety(): Satiety {\n        return this._satiety;\n    }\n    \n    public get totalWeight() {\n        return this._weight.reduce((w1, w2) => w1 + w2);\n    }\n    \n    public toString(): string {\n        return JSON.stringify(this);\n    }\n    \n    static FromValues(id: number | undefined, date: string, weight: number[], hungerNote: number, satiety: Satiety): Meal {\n        return new Meal(\n            id,\n            new Date(date),\n            weight,\n            hungerNote,\n            satiety\n        );\n    }\n    \n    static parse(serializedMeal: string): Meal {\n        const deserialized = JSON.parse(serializedMeal);\n        return new Meal(\n            deserialized._id,\n            new Date(deserialized._date),\n            deserialized._weight,\n            deserialized._hungerNote,\n            deserialized._satiety\n        )\n    }\n}","import Meal from \"../../model/Meal\";\n\nexport default  class MealDatabaseAdapter {\n    private readonly _meal: Meal | undefined;\n    \n    readonly id: number | undefined;\n    readonly date: string | undefined;\n    readonly weight: string | undefined;\n    readonly hungerNote: number | undefined;\n    readonly satiety: number | undefined;\n    \n    constructor(meal: any) {\n        if (meal instanceof Meal) {\n            this.id = meal.id;\n            this.date = meal.date.toISOString();\n            this.weight = meal.weight.join(';');\n            this.hungerNote = meal.hungerNote;\n            this.satiety = meal.satiety;\n        }\n        else\n            this._meal = Meal.FromValues(\n                meal.id,\n                meal.date,\n                meal.weight.split(';').map((weight: string) => Number(weight)),\n                meal.hungerNote,\n                meal.satiety\n            );\n    }\n    \n    public get Meal(): Meal | undefined {\n        return this._meal;\n    }\n}","import {Connection} from \"jsstore\";\nimport Meal from \"../../model/Meal\";\nimport getDbSchema from \"./MealDatabaseSchema\";\nimport MealDatabaseAdapter from \"./MealDatabaseAdapter\";\nimport GetConnection from \"../ConnectionFactory\";\n\nexport default class MealRepository {\n    private static _instance: MealRepository | undefined;\n    private static readonly MealDatabaseName = \"Meals\";\n    private _connection: Connection;\n    \n    private constructor(connection: Connection) {\n        this._connection = connection;\n    }\n    \n    public async getLastMeals(nbOfMeals: number): Promise<Meal[]> {\n        const mealDbObject = await this._connection.select({\n            from: MealRepository.MealDatabaseName,\n            order: {\n                by: \"date\",\n                type: \"desc\"\n            },\n            limit: nbOfMeals\n        });\n        \n        return mealDbObject\n            .map((dbObject) => new MealDatabaseAdapter(dbObject).Meal as Meal)\n    }\n    \n    public async saveMeal(meal: Meal): Promise<boolean> {\n        const adapter = new MealDatabaseAdapter(meal);\n        const numberOfLineAffected: number | unknown = meal.id === undefined\n            ? await this.insert(adapter)\n            : await this.update(adapter)\n        \n        return typeof numberOfLineAffected === \"number\" && numberOfLineAffected > 0;\n    }\n    \n    public async deleteMeals(mealIds: number[]): Promise<boolean> {\n        const numberOfDeletedLines = await this._connection.remove({\n            from: MealRepository.MealDatabaseName,\n            where: {\n                id: {\n                    in: mealIds\n                }\n            }\n        });\n        \n        return numberOfDeletedLines > 0;\n    }\n\n    private async insert(adapter: MealDatabaseAdapter): Promise<number | unknown> {\n        return await this._connection.insert({\n            into: MealRepository.MealDatabaseName,\n            values: [adapter]\n        });\n    }\n    \n    private async update(adapter: MealDatabaseAdapter): Promise<number | unknown> {\n        return await this._connection.update({\n            in: MealRepository.MealDatabaseName,\n            where: {\n                id: adapter.id\n            },\n            set: {\n                date:  adapter.date,\n                weight:  adapter.weight,\n                hungerNote : adapter.hungerNote,\n                satiety : adapter.satiety\n            }\n        });\n    }\n\n    public static async getInstance() {\n        if (this._instance === undefined) {\n            const connection = GetConnection();\n            await connection.initDb(getDbSchema(this.MealDatabaseName));\n            this._instance = new MealRepository(connection);\n        }\n        \n        return this._instance;\n    }\n}\n\n","import {Connection} from \"jsstore\";\n\nexport default function GetConnection() {\n    return new Connection(new Worker(\"jsstore.worker.js\"));\n}","export default function getDbSchema(mealDatabaseName: string) {\n    const mealSchema = {\n        name: mealDatabaseName,\n        columns: {\n            id: { primaryKey: true, autoIncrement: true },\n            date:  { notNull: true, dataType: \"string\" },\n            weight:  { notNull: true, dataType: \"string\" },\n            hungerNote : { notNull: true, dataType: \"number\" },\n            satiety : { notNull: true, dataType: \"number\" }\n        }\n    }\n\n    return {\n        name: \"mealDatabase\",\n        tables: [mealSchema]\n    };\n}","import MealRepository from \"./MealRepository\";\n\nexport default MealRepository;","import {createSlice, PayloadAction} from '@reduxjs/toolkit';\nimport {Satiety} from \"../../model/Satiety\";\nimport {AppThunk, RootState} from \"../../app/store\";\nimport Meal from \"../../model/Meal\";\nimport MealRepository from \"../../repositories/MealRepository\";\n\nexport interface MealFormState {\n    id: number | undefined;\n    date: string;\n    weight: number[];\n    hungerNote: number;\n    satiety: Satiety;\n}\n\nconst initialState: MealFormState = {\n    id: undefined,\n    date: new Date(Date.now()).toISOString(),\n    weight: [0],\n    hungerNote: 0,\n    satiety: Satiety.fine\n};\n\nexport const mealSlice = createSlice({\n    name: \"mealForm\",\n    initialState,\n    reducers: {\n        updateMealDate: (state, action: PayloadAction<string>) => {\n            const dateInState = new Date(state.date);\n            const newDate = new Date(action.payload);\n\n            newDate.setHours(dateInState.getHours());\n            newDate.setMinutes(dateInState.getMinutes());\n            \n            state.date = newDate.toISOString()\n        },\n        updateMealTime: (state, action: PayloadAction<string>) => {\n            const dateInState = new Date(state.date);\n            const newDate = new Date(action.payload);\n            \n            newDate.setFullYear(dateInState.getFullYear());\n            newDate.setMonth(dateInState.getMonth());\n            newDate.setDate(dateInState.getDate());\n            \n            state.date = newDate.toISOString()\n        },\n        updateMealWeight: (state, action: PayloadAction<{ newValue: number, index: number }>) => {\n            state.weight[action.payload.index] = action.payload.newValue\n        },\n        addMealWeight: state => {\n            state.weight.push(0);\n        },\n        removeMealWeight: state => {\n            state.weight.pop();\n        },\n        updateSatiety: (state, action: PayloadAction<Satiety>) => {\n            state.satiety = action.payload;\n        },\n        updateHungerNote: (state, action: PayloadAction<number>) => {\n            state.hungerNote = action.payload;\n        },\n        clearState: state => initialState\n    }\n})\n\nexport const { updateHungerNote, updateSatiety, updateMealWeight, addMealWeight, removeMealWeight} = mealSlice.actions\n\nexport const updateMealDate = (date: Date) =>\n    mealSlice.actions.updateMealDate(date.toISOString());\n\nexport const updateMealTime = (date: Date) =>\n    mealSlice.actions.updateMealTime(date.toISOString());\n\nexport const saveMealAsync = (): AppThunk => async (dispatch, getState) => {\n    const mealState = getState().mealForm;\n    const mealToSave = Meal.FromValues(mealState.id, mealState.date, mealState.weight, mealState.hungerNote, mealState.satiety);\n    const mealRepository = await MealRepository.getInstance()\n    const success = await mealRepository.saveMeal(mealToSave);\n\n    if (success)\n        dispatch(mealSlice.actions.clearState());\n};\n\nexport const addMealFormSelector = (state: RootState) => state.mealForm;\n\nconst mealFormReducer = mealSlice.reducer;\nexport default mealFormReducer;","import {createSlice} from \"@reduxjs/toolkit\";\nimport {RootState} from \"../../app/store\";\n\ninterface NavMenuState {\n    drawerIsOpen: boolean;\n}\n\nconst initialState : NavMenuState = {\n    drawerIsOpen: false,\n}\n\nexport const navMenuSlice = createSlice({\n        name: \"navMenu\",\n        initialState,\n        reducers: {\n            openDrawer: state => {\n                state.drawerIsOpen = true;\n            },\n            closeDrawer: state => {\n                state.drawerIsOpen = false;\n            }\n        }\n    }\n)\n\nexport const { openDrawer, closeDrawer } = navMenuSlice.actions;\n\nexport const navMenuSelector = (state: RootState) => state.navMenu; \n    \nconst navMenuReducer = navMenuSlice.reducer;\n\nexport default navMenuReducer;","import {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\nimport {AppThunk, RootState} from \"../../app/store\";\nimport MealRepository from \"../../repositories/MealRepository\";\n\nexport interface HomeState {\n    lastMeals: string[];\n    selectedMealIds: number[]\n}\n\nconst initialState: HomeState = {\n    lastMeals: [],\n    selectedMealIds: []\n}\n\nconst homeSlice = createSlice({\n    name: \"home\",\n    initialState,\n    reducers: {\n        addSelectedMealId: (state, action: PayloadAction<number>) => {\n            state.selectedMealIds = [...state.selectedMealIds, action.payload]\n        },\n        removeSelectedMealId: (state, action: PayloadAction<number>) => {\n            state.selectedMealIds = state.selectedMealIds.filter(id => id !== action.payload);\n        },\n        lastMealsLoaded: (state, action: PayloadAction<string[]>) => {\n            state.lastMeals = action.payload;\n        }\n    }\n});\n\nexport const loadLastMeals = (numberOfMealToLoad: number): AppThunk => async dispatch => {\n    const repository = await MealRepository.getInstance();\n    const lastMeals = await repository.getLastMeals(numberOfMealToLoad);\n    dispatch(homeSlice.actions.lastMealsLoaded(lastMeals.map(meal => meal.toString())));\n}\n\nexport const deleteMealsAsync = (mealIds: number[]): AppThunk => async dispatch => {\n    const repository = await MealRepository.getInstance();\n    const success = await  repository.deleteMeals(mealIds);\n    \n    if (success)\n        mealIds.map(id => dispatch(removeSelectedMealId(id)));\n}\n\nexport const {addSelectedMealId, removeSelectedMealId } = homeSlice.actions;\n\nexport const homeSelector = (state: RootState) => state.home;\n\nconst homeReducer = homeSlice.reducer;\nexport default homeReducer;","import {configureStore, ThunkAction, Action} from '@reduxjs/toolkit';\nimport counterReducer from '../features/counter/counterSlice';\nimport mealFormReducer from \"../features/mealForm/mealSlice\";\nimport navMenuReducer from \"../features/navMenu/navMenuSlice\";\nimport homeReducer from \"../features/home/homeSlice\";\n\nexport const store = configureStore({\n  reducer: {\n    counter: counterReducer,\n    mealForm: mealFormReducer,\n    navMenu: navMenuReducer,\n    home: homeReducer\n  }\n});\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>;\n","import * as React from 'react';\nimport {\n    Drawer,\n    Hidden,\n    List,\n    ListItem,\n    ListItemIcon,\n    ListItemText, Toolbar, Typography\n} from \"@material-ui/core\";\nimport HomeIcon from \"@material-ui/icons/Home\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport {NavLink} from \"react-router-dom\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {navMenuSelector, closeDrawer} from \"./navMenuSlice\";\nimport {createStyles, makeStyles, Theme} from \"@material-ui/core/styles\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\n\nconst drawerWidth = 240;\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        drawer: {\n            width: drawerWidth,\n        },\n        drawerPaper: {\n            width: drawerWidth,\n        },\n    }),\n);\n\nconst drawer = (\n    <React.Fragment>\n        <List>\n            <ListItem component={NavLink} to=\"/\" key=\"Home\">\n                <ListItemIcon><HomeIcon /></ListItemIcon>\n                <ListItemText primary=\"Accueil\" />\n            </ListItem>\n            <ListItem component={NavLink} to=\"/add-meal\" key=\"AddMeal\">\n                <ListItemIcon><AddIcon /></ListItemIcon>\n                <ListItemText primary=\"Ajouter un repas\" />\n            </ListItem>\n        </List>      \n    </React.Fragment>\n);\n\nexport default function NavMenu() {\n    const navMenuState = useSelector(navMenuSelector);\n    const dispatch = useDispatch();\n    const classes = useStyles();\n    \n    return (\n        <nav>\n            <Hidden smUp>\n                <Drawer \n                    variant=\"temporary\" \n                    anchor=\"left\" \n                    open={navMenuState.drawerIsOpen}\n                    onClick={() => dispatch(closeDrawer())}\n                    className={classes.drawer}\n                    classes={{\n                        paper: classes.drawerPaper,\n                    }}\n                >\n                    <Toolbar>\n                        <ListItemIcon><MenuIcon /></ListItemIcon>\n                        <Typography variant=\"h5\">\n                            Menu\n                        </Typography>\n                    </Toolbar>\n                    {drawer}\n                </Drawer>\n            </Hidden>\n            <Hidden xsDown>\n                <Drawer \n                    variant=\"permanent\"\n                    className={classes.drawer}\n                    classes={{\n                        paper: classes.drawerPaper,\n                    }}\n                >\n                    <Toolbar />\n                    {drawer}\n                </Drawer>\n            </Hidden>\n        </nav>\n    );\n}","import * as React from 'react';\nimport {AppBar, Container, Hidden, Toolbar, Typography} from \"@material-ui/core\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport {useDispatch} from \"react-redux\";\nimport {openDrawer} from \"./features/navMenu/navMenuSlice\";\nimport NavMenu from \"./features/navMenu/NavMenu\";\nimport {makeStyles, Theme, createStyles} from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        root: {\n            display: 'flex',\n        },\n        appBar: {\n            zIndex: theme.zIndex.drawer + 1,\n        },\n        content: {\n            padding: theme.spacing(3),\n        },\n    }),\n);\n\nexport default function Layout(props: { children: React.ReactNode }) {\n    const dispatch = useDispatch();\n    const classes = useStyles();\n    \n    return (\n        <div className={classes.root}>\n            <AppBar className={classes.appBar}>\n                <Toolbar>\n                    <Hidden smUp>\n                        <IconButton \n                            edge=\"start\" \n                            color=\"inherit\" \n                            aria-label=\"menu\"\n                            onClick={() => dispatch(openDrawer())}\n                        >\n                            <MenuIcon/>\n                        </IconButton>\n                    </Hidden>\n                    <Typography variant=\"h6\">\n                        Food Tracker\n                    </Typography>\n                </Toolbar>\n            </AppBar>\n            <NavMenu />\n            <Hidden xsDown>\n                <div className={classes.content}>\n                    <Toolbar />\n                    {props.children}\n                </div>\n            </Hidden>\n            <Hidden smUp>\n                <Container className={classes.content}>\n                    <Toolbar />\n                    {props.children}\n                </Container>\n            </Hidden>\n        </div>\n    );\n}\n","import MealDateTime from \"./MealDateTime\";\n\nexport default MealDateTime;","import React from \"react\";\nimport {Typography} from \"@material-ui/core\";\n\ninterface PropsType {\n    date: Date;\n}\n\nexport default function MealDateTime({ date }: PropsType) {\n    function formatNumber(value: number): string {\n        return value.toString().padStart(2, '0');\n    }\n    \n    const formattedDate = `${formatNumber(date.getDate())}/${formatNumber(date.getMonth())}/${formatNumber(date.getFullYear())}`;\n    const formattedTime = `${formatNumber(date.getHours())}:${formatNumber(date.getMinutes())}`;\n    return (\n        <Typography variant=\"body1\">{formattedDate} {formattedTime}</Typography>\n    );\n}","import {Typography} from \"@material-ui/core\";\nimport React from \"react\";\n\ninterface PropsType {\n    weightValues: number[];\n}\n\nexport default function MealWeight({ weightValues }: PropsType) {\n    return (\n        <Typography variant=\"body1\">{weightValues.reduce((w1, w2) => w1 + w2)}g</Typography>\n    )\n}","import HungerNote from \"./HungerNote\";\n\nexport default HungerNote;","import {Typography} from \"@material-ui/core\";\nimport React from \"react\";\n\ninterface PropsType {\n    note: number;\n}\n\nexport default function HungerNote({ note }: PropsType) {\n    return (\n        <Typography variant=\"body1\">{note}/10</Typography>\n    )\n}","import {Satiety} from \"../../../../../../model/Satiety\";\nimport {Typography} from \"@material-ui/core\";\nimport React from \"react\";\n\ninterface PropsType {\n    satiety: Satiety\n}\n\nexport default function SatietyLabel({ satiety }: PropsType) {\n    const labels: Record<Satiety, string> = {\n        [Satiety.ateToMuch]: \"Trop mangé\",\n        [Satiety.fine]: \"Bien\",\n        [Satiety.stillHungry]: \"Encore faim\"\n    }\n\n    return (\n        <Typography variant=\"body1\">{labels[satiety]}</Typography>\n    ) \n}","import React from \"react\";\nimport Meal from \"../../../../model/Meal\";\nimport {TableCell, TableRow} from \"@material-ui/core\";\nimport MealDateTime from \"./components/MealDateTime\";\nimport MealWeight from \"./components/MealWeight/MealWeight\";\nimport HungerNote from \"./components/HungerNote\";\nimport SatietyLabel from \"./components/SatietyLabel/Satiety\";\nimport {useDispatch} from \"react-redux\";\nimport {addSelectedMealId, removeSelectedMealId} from \"../../homeSlice\";\n\ninterface PropsType {\n    meal: Meal;\n    isSelected: boolean;\n}\n\nexport default function MealRow({ meal, isSelected }: PropsType) {\n    const dispatch = useDispatch();\n    \n    const toggleSelection = () => {\n        if (isSelected)\n            dispatch(removeSelectedMealId(Number(meal.id)));\n        else\n            dispatch(addSelectedMealId(Number(meal.id)));\n    }\n    \n    return (\n        <TableRow onClick={toggleSelection} key={meal.id} selected={isSelected}>\n            <TableCell>\n                <MealDateTime date={meal.date} />\n            </TableCell>\n            <TableCell align=\"right\">\n                <MealWeight weightValues={meal.weight} />\n            </TableCell>\n            <TableCell>\n                <HungerNote note={meal.hungerNote} />\n            </TableCell>\n            <TableCell>\n                <SatietyLabel satiety={meal.satiety} />\n            </TableCell>\n        </TableRow>\n    );\n}","import {Button} from \"@material-ui/core\";\nimport {useDispatch} from \"react-redux\";\nimport {deleteMealsAsync} from \"../../homeSlice\";\nimport React from \"react\";\nimport {createStyles, makeStyles, Theme} from \"@material-ui/core/styles\";\n\ninterface PropsType {\n    mealIds: number[]\n}\n\nconst useStyle = makeStyles((theme: Theme) => createStyles({\n    buttonContainer: {\n        display: \"flex\",\n        justifyContent: \"center\"\n    },\n    button: {\n        marginTop: theme.spacing(3)\n    }\n}));\n\nexport default function DeleteMealsButton({ mealIds }: PropsType) {\n    const dispatch = useDispatch();\n    const classes = useStyle();\n    return (\n        <div className={classes.buttonContainer}>\n            <Button \n                className={classes.button}\n                disabled={mealIds.length === 0} \n                variant=\"contained\" \n                color=\"secondary\" \n                onClick={() => dispatch(deleteMealsAsync(mealIds))}\n            >\n                Supprimer les éléments séléctionnés\n            </Button>\n        </div>\n    );\n}","import DeleteMealsButton from \"./DeleteMealsButton\";\n\nexport default DeleteMealsButton;","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { updateMealDate } from \"../../mealSlice\";\nimport DateFnsUtils from \"@date-io/date-fns\"\nimport {MuiPickersUtilsProvider, KeyboardDatePicker} from \"@material-ui/pickers\";\nimport {makeStyles, Theme, createStyles} from \"@material-ui/core/styles\";\n\ninterface PropsType {\n    date?: Date\n}\n\nconst useStyle = makeStyles((theme: Theme) => createStyles({\n    datePicker: {\n        marginBottom: theme.spacing(3)\n    }\n}));\n\nexport default function MealDateField({ date }: PropsType) {\n    const dispatch = useDispatch();\n    const classes = useStyle();\n    \n    function useDateUpdate(date: Date | null) {\n        if (date !== null)\n            dispatch(updateMealDate(date));\n    }\n    \n    return (\n        <MuiPickersUtilsProvider utils={DateFnsUtils}>\n            <KeyboardDatePicker\n                className={classes.datePicker}\n                onChange={useDateUpdate}\n                value={date}\n                format=\"dd/MM/yyyy\"\n                label=\"Date du repas\"\n                invalidDateMessage=\"Format de date invalide\"\n            />\n        </MuiPickersUtilsProvider>\n    );\n}\n","import MealDateField from \"./MealDateField\";\n\nexport default MealDateField","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { updateMealTime } from \"../../mealSlice\";\nimport DateFnsUtils from \"@date-io/date-fns\"\nimport {MuiPickersUtilsProvider, KeyboardTimePicker} from \"@material-ui/pickers\";\nimport {createStyles, makeStyles, Theme} from \"@material-ui/core/styles\";\n\ninterface PropsType {\n    time?: Date\n}\n\nconst useStyle = makeStyles((theme: Theme) => createStyles({\n    datePicker: {\n        marginBottom: theme.spacing(3)\n    }\n}));\n\nexport default function MealTimeField({ time }: PropsType) {\n    const dispatch = useDispatch();\n    const classes = useStyle();\n\n    function useDateUpdate(time: Date | null) {\n        if (time !== null)\n            dispatch(updateMealTime(time));\n    }\n\n    return (\n        <MuiPickersUtilsProvider utils={DateFnsUtils}>\n            <KeyboardTimePicker\n                className={classes.datePicker}\n                onChange={useDateUpdate}\n                value={time}\n                format=\"HH:mm\"\n                label=\"Heure du repas\"\n                invalidDateMessage=\"Format d'heure invalide\"\n                ampm={false}\n            />\n        </MuiPickersUtilsProvider>\n    );\n}\n","import MealTimeField from \"./MealTimeField\";\n\nexport default MealTimeField","import React from \"react\";\nimport {Slider, Typography} from \"@material-ui/core\";\nimport { updateHungerNote } from \"../../mealSlice\";\nimport {useDispatch} from \"react-redux\";\nimport {createStyles, makeStyles, Theme} from \"@material-ui/core/styles\";\n\ninterface PropsType {\n    hungerNote: number\n}\n\nconst useStyle = makeStyles((theme: Theme) => createStyles({\n    slider: {\n        marginBottom: theme.spacing(3)\n    }\n}));\n\nexport default function HungerNoteSlider({ hungerNote }: PropsType) {\n    const dispatch = useDispatch();\n    const classes = useStyle();\n    \n    const marks = Array.from(new Array(11).keys()).map(key => ({\n        value: key,\n        label: key.toString()\n    }));\n    \n    const dispatchNewHungerNote = (event: any, newValue: number | number[]) => {\n        const valueAsNumber = newValue as number;\n        if (valueAsNumber != null)\n            dispatch(updateHungerNote(valueAsNumber));\n    }\n    \n    return (\n        <div className={classes.slider}>\n            <Typography>\n                Evaluation de la faim\n            </Typography>\n            <Slider\n                aria-label=\"Evaluation de la faim\"\n                marks={marks}\n                value={hungerNote}\n                min={0}\n                max={10}\n                step={1}\n                onChangeCommitted={dispatchNewHungerNote}\n            />\n        </div>\n    )\n}","import HungerNoteSlider from \"./HungerNoteSlider\";\n\nexport default HungerNoteSlider;","import React, {ChangeEvent} from \"react\";\nimport {Satiety} from \"../../../../model/Satiety\";\nimport {FormControl, InputLabel, MenuItem, Select} from \"@material-ui/core\";\nimport {useDispatch} from \"react-redux\";\nimport {updateSatiety} from \"../../mealSlice\";\nimport {makeStyles, Theme, createStyles} from \"@material-ui/core/styles\";\n\ninterface PropsType {\n    satiety: Satiety;\n}\n\nconst useStyle = makeStyles((theme: Theme) => createStyles({\n    element: {\n        marginBottom: theme.spacing(3)\n    }\n}));\n\nexport default function SatietySelect({satiety}: PropsType) {\n    const dispatch = useDispatch();\n    const classes = useStyle();\n    \n    const dispatchUpdateSatiety = (event: ChangeEvent<{ value: unknown }>) => {\n        const feeling = event.target.value as Satiety;\n        \n        if (feeling != null)\n            dispatch(updateSatiety(feeling))\n    }\n    \n    return (\n        <FormControl className={classes.element}>\n            <InputLabel id=\"satietyLabel\">Sensation après le repas</InputLabel>\n            <Select labelId=\"satietyLabel\" value={satiety} onChange={dispatchUpdateSatiety}>\n                <MenuItem value={Satiety.stillHungry} >Encore faim</MenuItem>\n                <MenuItem value={Satiety.fine}>Bien</MenuItem>\n                <MenuItem value={Satiety.ateToMuch}>Trop mangé</MenuItem>\n            </Select>\n        </FormControl>    \n    );\n}","import SatietySelect from \"./SatietySelect\";\n\nexport default SatietySelect;","export default class MealWeightValidator {\n    static validate(weight: number): [ boolean, string ] {\n        \n        if (weight == null) \n            return [ false, \"Le poids est obligatoire\" ];\n\n        if (isNaN(weight))\n            return [ false, \"Le poids doit être un nombre\" ];\n\n        if (weight < 0)\n            return [ false, \"Le poids doit être supérieur ou égale à 0\" ];\n\n        return [ true, \"\" ];\n    }\n}","import React, {ChangeEvent, useState} from 'react';\nimport { useDispatch } from 'react-redux';\nimport { updateMealWeight } from \"../../../mealSlice\";\nimport {InputAdornment, TextField} from \"@material-ui/core\";\nimport MealWeightValidator from \"./MealWeightValidator\";\nimport {createStyles, makeStyles, Theme} from \"@material-ui/core/styles\";\n\ninterface PropsType {\n    weight: number;\n    index: number;\n}\n\nconst useStyle = makeStyles((theme: Theme) => createStyles({\n    inputField: {\n        marginBottom: theme.spacing(3)\n    }\n}));\n\nexport default function MealWeightField({ weight, index }: PropsType) {\n    const dispatch = useDispatch();\n    const [error, setError] = useState(false);\n    const [errorMessage, setErrorMessage] = useState(\"\");\n    const classes = useStyle();\n\n    const updateWeight = (event: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n        const weight = Number(event.target.value);\n        const [ isValid, errorMessage ] = MealWeightValidator.validate(weight);\n        \n        setError(!isValid);\n        setErrorMessage(errorMessage);\n            \n        dispatch(updateMealWeight({newValue: weight, index: index}));\n    }\n\n    return (\n        <TextField\n            className={classes.inputField}\n            label=\"Poids\"\n            type=\"number\"\n            value={weight.toString()}\n            error={error}\n            helperText={errorMessage}\n            onChange={updateWeight}\n            InputProps={{\n                endAdornment: <InputAdornment position=\"end\">g</InputAdornment>,\n            }}\n            autoFocus={true}\n        />\n    );\n}\n","import MealWeightField from \"./MealWeightField\";\n\nexport default MealWeightField;","import React from \"react\";\nimport MealWeightField from \"./MealWeightField\";\nimport {addMealWeight, removeMealWeight} from \"../../mealSlice\";\nimport {Button} from \"@material-ui/core\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport RemoveIcon from \"@material-ui/icons/Remove\";\nimport {useDispatch} from \"react-redux\";\nimport {createStyles, makeStyles, Theme} from \"@material-ui/core/styles\";\n\ninterface PropsType {\n    weightValues: number[];\n}\n\nconst useStyle = makeStyles((theme: Theme) => createStyles({\n    buttonSection: {\n        marginBottom: theme.spacing(3),\n        display: \"flex\",\n        justifyContent: \"space-evenly\"\n    }\n}));\n\nexport default function MealWeightComponent({ weightValues }: PropsType) {\n    const dispatch = useDispatch();\n    const classes = useStyle();\n    \n    const addWeightValue = () => {\n        dispatch(addMealWeight())\n    }\n    \n    const removeWeightValue = () => {\n        dispatch(removeMealWeight())\n    }\n    \n    return (\n        <React.Fragment>\n            {weightValues.map((weight, index) => \n                <MealWeightField key={index} weight={weight} index={index} />\n            )}\n            <div className={classes.buttonSection}>\n                <Button\n                    variant=\"contained\"\n                    color=\"secondary\"\n                    children={<RemoveIcon />}\n                    onClick={removeWeightValue}\n                />\n                <Button\n                    variant=\"contained\"\n                    color=\"default\"\n                    children={<AddIcon />}\n                    onClick={addWeightValue}\n                />    \n            </div>\n        </React.Fragment>\n    );\n}","import MealWeightComponent from \"./MealWeightComponent\";\n\nexport default MealWeightComponent;","import React from \"react\";\nimport {Button} from \"@material-ui/core\";\nimport {useDispatch} from \"react-redux\";\nimport {saveMealAsync} from \"../../mealSlice\";\nimport {createStyles, makeStyles, Theme} from \"@material-ui/core/styles\";\nimport {NavLink} from \"react-router-dom\";\n\nconst useStyle = makeStyles((theme: Theme) => createStyles({\n    button: {\n        marginTop: theme.spacing(3)\n    }\n}));\n\nexport default function SaveMealButton() {\n    const dispatch = useDispatch();\n    const classes = useStyle();\n    \n    const saveMeal = () => {\n        dispatch(saveMealAsync());\n    }\n    \n    return (\n      <Button variant=\"contained\" className={classes.button} color=\"primary\" onClick={saveMeal} component={NavLink} to=\"/\">\n          Enregistrer\n      </Button>  \n    );\n}","import SaveMealButton from \"./SaveMealButton\";\n\nexport default SaveMealButton;","import {Typography} from \"@material-ui/core\";\nimport React from \"react\";\nimport {createStyles, makeStyles, Theme} from \"@material-ui/core/styles\";\n\ninterface PropsType {\n    weightValues: number[];\n}\n\nconst useStyle = makeStyles((theme: Theme) => createStyles({\n    totalWeight: {\n        marginBottom: theme.spacing(3)\n    }\n}));\n\nexport default function TotalWeight({ weightValues }: PropsType) {\n    const totalWeight = weightValues.reduce((w1, w2) => w1 + w2);\n    const classes = useStyle();\n    \n    return (\n        <Typography className={classes.totalWeight} variant=\"h6\">Poids total : {totalWeight}</Typography>\n    )\n}","import TotalWeight from \"./TotalWeight\";\n\nexport default TotalWeight;","import React from \"react\";\nimport { useSelector } from 'react-redux';\nimport { addMealFormSelector } from \"./mealSlice\";\nimport MealDateField from \"./components/MealDateField\";\nimport MealTimeField from \"./components/MealTimeField\";\nimport HungerNoteSlider from \"./components/HungerNoteSlider\";\nimport SatietySelect from \"./components/SatietySelect\";\nimport {FormControl} from \"@material-ui/core\";\nimport MealWeightComponent from \"./components/MealWeightComponent\";\nimport SaveMealButton from \"./components/SaveMealButton\";\nimport {createStyles, makeStyles, Theme} from \"@material-ui/core/styles\";\nimport TotalWeight from \"./components/TotalWeight\";\n\nconst useStyle = makeStyles((theme: Theme) => createStyles({\n  container: {\n    width: \"100%\",\n    display: \"flex\",\n    justifyContent: \"center\"\n  }\n}));\n\nexport default function MealForm() {\n  const state = useSelector(addMealFormSelector);\n  const classes = useStyle();\n  \n  return (\n    <div className={classes.container}>\n      <FormControl>\n        <TotalWeight weightValues={state.weight} />\n        <MealWeightComponent weightValues={state.weight} />\n        <MealDateField date={new Date(state.date)} />\n        <MealTimeField time={new Date(state.date)} />\n        <HungerNoteSlider hungerNote={state.hungerNote} />\n        <SatietySelect satiety={state.satiety} />\n        <SaveMealButton />\n      </FormControl>\n    </div>\n  );\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport {store} from \"./app/store\";\nimport {Provider} from \"react-redux\";\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport Layout from \"./Layout\";\nimport Home from \"./features/home/Home\";\nimport MealForm from \"./features/mealForm/MealForm\";\n\nReactDOM.render(\n    <Provider store={store}>\n        <Router>\n            <Layout>\n                <Route path=\"/food-tracker/\" exact component={Home} />\n                <Route path=\"/food-tracker/add-meal\" component={MealForm} />\n            </Layout>\n        </Router>\n    </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n","import React from \"react\";\nimport {Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Typography} from \"@material-ui/core\";\nimport MealRow from \"./components/MealRow/MealRow\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {homeSelector, loadLastMeals} from \"./homeSlice\";\nimport DeleteMealsButton from \"./components/DeleteButton\";\nimport Meal from \"../../model/Meal\";\n\nexport default function Home() {\n    const dispatch = useDispatch();\n    dispatch(loadLastMeals(10));\n    const homeState = useSelector(homeSelector);\n    \n    return (\n        <div>\n            <Typography variant=\"h4\">\n                Derniers repas\n            </Typography>\n            <TableContainer>\n                <Table>\n                    <TableHead>\n                        <TableRow>\n                            <TableCell>Date et heure</TableCell>\n                            <TableCell>Poids</TableCell>\n                            <TableCell>Faim</TableCell>\n                            <TableCell>Satiété</TableCell>\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        {homeState.lastMeals.map(serializedMeal => {\n                            const meal = Meal.parse(serializedMeal);\n                            return (<MealRow key={meal.id} meal={meal} isSelected={homeState.selectedMealIds.includes(Number(meal.id))}/>)\n                        })}\n                    </TableBody>\n                </Table>\n            </TableContainer>\n            <DeleteMealsButton mealIds={homeState.selectedMealIds} />\n        </div>\n    )\n}"],"sourceRoot":""}